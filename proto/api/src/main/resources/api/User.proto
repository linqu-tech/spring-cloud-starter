syntax = "proto2";

package UserProto;

option java_package = "tech.linqu.spring.cloud.starter.proto.external.user";

import "imports/Common.proto";
import "imports/Model.proto";
import "imports/WebpbOptions.proto";
import "webpb/WebpbExtend.proto";

message UserSignupRequest {
    option (m_opts).opt = {
        method: "POST"
        context: "uaa"
        path: "/signup"
    };

    required string username = 1 [(opts).java = {
        annotation: '@NotNull'
        annotation: '@Length(min = 3, max = 20)'
    }];
    required string password = 2 [(opts).java = {
        annotation: '@NotNull'
        annotation: '@Length(min = 3, max = 20)'
    }];
}

message UserSignupResponse {
}

message UserCurrentRequest {
    option (m_opts).opt = {
        method: "GET"
        context: "uaa"
        path: "/user/current"
    };
}

message UserCurrentResponse {
    required ModelProto.UserPb user = 1;
}

message UserListRequest {
    option (m_opts).opt = {
        method: "POST"
        context: "account"
        path: "/user/list?pagination={pageable.pagination}&page={pageable.page}&size={pageable.size}&sort={pageable.sort}"
    };

    optional CommonProto.PageablePb pageable = 1 [(opts).opt = {in_query: true}];
    optional string nickname = 2;
    optional int32 status = 3;
    optional int64 userId = 4 [(opts).ts = {as_string: true}];
    repeated int32 genders = 5;
}

message UserListResponse {
    repeated ModelProto.UserPb users = 1;
    required CommonProto.PagingPb paging = 2;
}

message UserDataRequest {
    option (m_opts).opt = {
        method: "GET"
        context: "account"
        path: "/user/{userId}"
    };

    required int64 userId = 1 [(opts).ts = {as_string: true}, (opts).java = { annotation: '@NotNull' }];
}

message UserDataResponse {
    required ModelProto.UserPb user = 1;
}

message UserChangeStatusRequest {
    option (m_opts).opt = {
        method: "POST"
        context: "account"
        path: "/user/{userId}/status"
    };

    required int64 userId = 1 [(opts).ts = {as_string: true}];
    required int32 status = 2;
}

message UserChangeStatusResponse {
    required int32 status = 1;
}

message UserDeleteRequest {
    option (m_opts).opt = {
        method: "POST"
        context: "account"
        path: "/user/{userId}/delete"
    };

    required int64 userId = 1 [(opts).ts = {as_string: true}];
}

message UserDeleteResponse {
}
